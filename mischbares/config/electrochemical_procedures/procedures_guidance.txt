In this file, user can find out the instruction about various elechtrochemical test procedures and
how they can be called.

# example configuration for available procedures
autolab_config['autolab']['procedures'] = {}

# chrono amperometry
# self.proc.Commands["switchpotentiostatic"].CommandParameters["WE(1).Current range"].Value = self.inst.Ei.CurrentRange
autolab_config['autolab']['procedures']['ca'] = {'procedure': 'ca',
                            'setpoints': {'applypotential0': {'Setpoint value: 0.0},
                                          'applypotential': {'Setpoint value': 0.735},
                                        'recordsignal': {'Duration (s)': 1000, 'Interval time (s)': 0.4}},
                            'plot': 'tCV',
                            'onoffafter': 'off',
                            'save_dir': None, # path to save the data
                            'filename': 'ca.nox',
                            'parseinstructions': ['recordsignal']}

# open circuit potential

autolab_config['autolab']['procedures']['ocp'] = {'procedure': 'ocp',
			'setpoints': {'recordsignal': {'Interval time (s)': 0.05,
                                            'Duration (s)': 20}},
			'plot': 'tCV',
			'onoffafter': 'off',
			'save_dir': None, # Path to save the data
			'filename': 'ocp.nox',
			'parseinstructions': ['recordsignal']}



# chrono potensiometry
# self.proc.Commands["switchgalvanostatic"].CommandParameters["WE(1).Current range"].Value = self.inst.Ei.CurrentRange
autolab_config['autolab']['procedures']['cp'] = {'procedure': 'cp',
                        'setpoints': {'applycurrent0': {Setpoint value': 0.0}, # here should be the ocp
                                      'applycurrent': {'Setpoint value': 7*(10**-6)},
                                    'recordsignal': {'Duration (s)': 600, "Interval time (s)": 0.01}},
                                    #TODO check the threshold of the number of poits that can be recorded.
                        'plot': 'tCV',
                        'onoffafter': 'off',
                        'save_dir': None, # path to save the data
                        'filename': 'cp.nox',
                        'parseinstructions': ['recordsignal']}


# impedance analysis
# self.proc.Commands['Autolab control'].CommandParameters['WE(1).Current range'].Value = self.inst.Ei.CurrentRange
autolab_config['autolab']['procedures']['eis'] = {'procedure': 'eis',
                            'setpoints': {'Set potential': {'Setpoint value': 0.01},
                                          'FRA single frequency': {'IntegrationTime': 0.125,
                                                                   'IntegrationCycle': 1,
                                                                   'DsgFrequency': 10000}},
                            'plot': 'impedance',
                            'onoffafter': 'off',
                            'save_dir': None, # path to save the data
                            'filename': 'eis.nox',
                            'parseinstructions': ['FIAMeasPotentiostatic', 'FIAMeasurement]}


# Impedance analysis
# self.proc.Commands['Autolab control'].CommandParameters['WE(1).Current range'].Value = self.inst.Ei.CurrentRange
autolab_config['autolab']['procedures']['eis_reverse'] = {'procedure': 'eis_reverse',
                            'setpoints': {'Set potential': {'Setpoint value': 0.01},
                                          'FRA single frequency': {'IntegrationTime: 0.125,
                                                                   'IntegrationCycle': 1,
                                                                   'DsgFrequency': 10}},
                            'plot': 'impedance',
                            'onoffafter': 'off',
                            'save_dir': None, # path to save the data
                            'filename': 'eis_reverse.nox',
                            'parseinstructions': ['FIAMeasPotentiostatic', 'FIAMeasurement]}



# chrono voltammetry analysis
autolab_config['autolab']['procedures']['cv'] = {'procedure': 'cv',
                        'setpoints': {'FHSetSetpointPotential': {'Setpoint value': 0.4},
                                        'FHWait': {'Time': 2},
                                        'CVLinearScanAdc164': {'StartValue': 0.4,
                                                                'UpperVertex': 1.5,
                                                                'LowerVertex': 0.399,
                                                                'NumberOfStopCrossings': 50,
                                                                'ScanRate': 0.02}},
                        'plot': 'tCV',
                        'onoffafter': 'off',
                        'save_dir': None, # path to save the data
                        'filename': 'cv.nox',
                        'parseinstructions': ['CVLinearScanAdc164']}
